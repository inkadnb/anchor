{
  "address": "0x9bC8c0FaA1d450e9E0e4f08c198f0b0dab37478f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFeed",
          "name": "_ftmFeed",
          "type": "address"
        },
        {
          "internalType": "contract IFeed",
          "name": "_ethFeed",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ethFeed",
      "outputs": [
        {
          "internalType": "contract IFeed",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ftmFeed",
      "outputs": [
        {
          "internalType": "contract IFeed",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf741822117e097a1283fdd97c131191aa0844f1b3a874cd146c5032fb16bda0b",
  "receipt": {
    "to": null,
    "from": "0xfEEB7b1bc8229617e4fd1C431AB2E26aA0e5877D",
    "contractAddress": "0x9bC8c0FaA1d450e9E0e4f08c198f0b0dab37478f",
    "transactionIndex": 488,
    "gasUsed": "317858",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9ef18bc6c9598013acac77b7cbd71ccb1326d41c714ba7496fb4c23459e477ed",
    "transactionHash": "0xf741822117e097a1283fdd97c131191aa0844f1b3a874cd146c5032fb16bda0b",
    "logs": [],
    "blockNumber": 14442586,
    "cumulativeGasUsed": "26048307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2DE7E4a9488488e0058B95854CC2f7955B35dC9b",
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"
  ],
  "solcInputHash": "171aa0e285966923bd7e6058afec666b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFeed\",\"name\":\"_ftmFeed\",\"type\":\"address\"},{\"internalType\":\"contract IFeed\",\"name\":\"_ethFeed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFeed\",\"outputs\":[{\"internalType\":\"contract IFeed\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ftmFeed\",\"outputs\":[{\"internalType\":\"contract IFeed\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/FtmFeed.sol\":\"FtmFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FtmFeed.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ninterface IFeed {\\r\\n    function decimals() external view returns (uint8);\\r\\n    function latestAnswer() external view returns (uint);\\r\\n}\\r\\n\\r\\ncontract FtmFeed is IFeed {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    IFeed public ftmFeed;\\r\\n    IFeed public ethFeed;\\r\\n\\r\\n    constructor(IFeed _ftmFeed, IFeed _ethFeed) public {\\r\\n        ftmFeed = _ftmFeed;\\r\\n        ethFeed = _ethFeed;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function latestAnswer() public view returns (uint) {\\r\\n        uint ftmEthPrice = ftmFeed.latestAnswer();\\r\\n        return ftmEthPrice\\r\\n            .mul(ethFeed.latestAnswer())\\r\\n            .div(10**uint256(ethFeed.decimals()));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7bcc137f3e4e9db8bfb7e953af98304eff47b67ad45be4a91eed6bccfd1a12dc\"},\"contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x6653e37ff57a02b7b7f20199bb0fd5685756ced19a67f53328b42c9d2167ffd2\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161046c38038061046c8339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b031991821617909155600180549390921692169190911790556103f28061007a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063192ad6c014610051578063313ce5671461007557806350d25bcd146100935780635e19d05c146100ad575b600080fd5b6100596100b5565b604080516001600160a01b039092168252519081900360200190f35b61007d6100c4565b6040805160ff9092168252519081900360200190f35b61009b6100c9565b60408051918252519081900360200190f35b61005961024c565b6000546001600160a01b031681565b601290565b60008054604080516350d25bcd60e01b8152905183926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b15801561010e57600080fd5b505afa158015610122573d6000803e3d6000fd5b505050506040513d602081101561013857600080fd5b50516001546040805163313ce56760e01b81529051929350610246926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561018657600080fd5b505afa15801561019a573d6000803e3d6000fd5b505050506040513d60208110156101b057600080fd5b5051600154604080516350d25bcd60e01b8152905160ff909316600a0a9261023a926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b15801561020157600080fd5b505afa158015610215573d6000803e3d6000fd5b505050506040513d602081101561022b57600080fd5b5051849063ffffffff61025b16565b9063ffffffff6102bd16565b91505090565b6001546001600160a01b031681565b60008261026a575060006102b7565b8282028284828161027757fe5b04146102b45760405162461bcd60e51b815260040180806020018281038252602181526020018061039d6021913960400191505060405180910390fd5b90505b92915050565b60006102b483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836103865760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561034b578181015183820152602001610333565b50505050905090810190601f1680156103785780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161039257fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a72315820a5b6384b7cdae8be630ce7f2a291419af18563aafcf3103cac80173257f85de864736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063192ad6c014610051578063313ce5671461007557806350d25bcd146100935780635e19d05c146100ad575b600080fd5b6100596100b5565b604080516001600160a01b039092168252519081900360200190f35b61007d6100c4565b6040805160ff9092168252519081900360200190f35b61009b6100c9565b60408051918252519081900360200190f35b61005961024c565b6000546001600160a01b031681565b601290565b60008054604080516350d25bcd60e01b8152905183926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b15801561010e57600080fd5b505afa158015610122573d6000803e3d6000fd5b505050506040513d602081101561013857600080fd5b50516001546040805163313ce56760e01b81529051929350610246926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561018657600080fd5b505afa15801561019a573d6000803e3d6000fd5b505050506040513d60208110156101b057600080fd5b5051600154604080516350d25bcd60e01b8152905160ff909316600a0a9261023a926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b15801561020157600080fd5b505afa158015610215573d6000803e3d6000fd5b505050506040513d602081101561022b57600080fd5b5051849063ffffffff61025b16565b9063ffffffff6102bd16565b91505090565b6001546001600160a01b031681565b60008261026a575060006102b7565b8282028284828161027757fe5b04146102b45760405162461bcd60e51b815260040180806020018281038252602181526020018061039d6021913960400191505060405180910390fd5b90505b92915050565b60006102b483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836103865760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561034b578181015183820152602001610333565b50505050905090810190601f1680156103785780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161039257fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a72315820a5b6384b7cdae8be630ce7f2a291419af18563aafcf3103cac80173257f85de864736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33267,
        "contract": "contracts/FtmFeed.sol:FtmFeed",
        "label": "ftmFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFeed)33260"
      },
      {
        "astId": 33269,
        "contract": "contracts/FtmFeed.sol:FtmFeed",
        "label": "ethFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFeed)33260"
      }
    ],
    "types": {
      "t_contract(IFeed)33260": {
        "encoding": "inplace",
        "label": "contract IFeed",
        "numberOfBytes": "20"
      }
    }
  }
}